PS C:\Users\Maxen\OneDrive\Documents\GitHub\iris> task test -- tests/unit/services/test_contour_detection_service.py
task: [test] docker-compose exec api pytest tests/unit/services/test_contour_detection_service.py
time="2025-06-05T09:42:00+02:00" level=warning msg="C:\\Users\\Maxen\\OneDrive\\Documents\\GitHub\\iris\\docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion"
========================================================================= test session starts ==========================================================================
platform linux -- Python 3.11.12, pytest-8.4.0, pluggy-1.6.0
rootdir: /app
configfile: pyproject.toml
plugins: asyncio-1.0.0, anyio-3.7.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 10 items                                                                                                                                                     

tests/unit/services/test_contour_detection_service.py FFF..FFF..                                                                                                 [100%]

=============================================================================== FAILURES ===============================================================================
___________________________________________ TestContourDetectionService.test_find_card_like_contours[card_normal_light.png] ____________________________________________

self = <tests.unit.services.test_contour_detection_service.TestContourDetectionService object at 0x7961286ea890>
service = <app.services.contour_detection_service.ContourDetectionService object at 0x7961286fa090>, image_name = 'card_normal_light.png'

    @pytest.mark.parametrize("image_name", [
        "card_normal_light.png",
        "ebay.png",
        "ebay2.png",
        "multiple_cards_image.png",
        "collection.png",
    ])
    def test_find_card_like_contours(self, service, image_name):
        # Construit le chemin complet de l'image
        img_path = os.path.join(TEST_ASSETS_DIR, image_name)
        # Lit l'image
        image = cv2.imread(img_path)
        # Saute le test si l'image n'est pas trouvée
        if image is None:
            pytest.skip(f"Image introuvable pour test: {img_path}")

        # Trouve les contours qui ressemblent à des cartes
        contours = service.find_card_like_contours(image)

        # Assure que des contours ont été détectés
>       assert contours, f"Aucun contour détecté dans {image_name}"
E       AssertionError: Aucun contour détecté dans card_normal_light.png
E       assert []

tests/unit/services/test_contour_detection_service.py:45: AssertionError
------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------
[DEBUG] Image convertie en niveaux de gris sauvegardée.
[DEBUG] Image floutée sauvegardée.
[DEBUG] Image normalisée luminosité/contraste sauvegardée.
[DEBUG] Image avec bords Canny sauvegardée.
[DEBUG] 241 contours bruts trouvés.
[DEBUG] Contour rejeté (critères non remplis): Aire=121.00, w=36, h=5, ratio=7.20, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=31.50, w=12, h=4, ratio=3.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=6.00, w=3, h=4, ratio=0.75, points=4
[DEBUG] 0 carte(s) détectée(s) après filtrage.
__________________________________________________ TestContourDetectionService.test_find_card_like_contours[ebay.png] __________________________________________________

self = <tests.unit.services.test_contour_detection_service.TestContourDetectionService object at 0x7961286e9fd0>
service = <app.services.contour_detection_service.ContourDetectionService object at 0x7961286fa090>, image_name = 'ebay.png'

    @pytest.mark.parametrize("image_name", [
        "card_normal_light.png",
        "ebay.png",
        "ebay2.png",
        "multiple_cards_image.png",
        "collection.png",
    ])
    def test_find_card_like_contours(self, service, image_name):
        # Construit le chemin complet de l'image
        img_path = os.path.join(TEST_ASSETS_DIR, image_name)
        # Lit l'image
        image = cv2.imread(img_path)
        # Saute le test si l'image n'est pas trouvée
        if image is None:
            pytest.skip(f"Image introuvable pour test: {img_path}")

        # Trouve les contours qui ressemblent à des cartes
        contours = service.find_card_like_contours(image)

        # Assure que des contours ont été détectés
>       assert contours, f"Aucun contour détecté dans {image_name}"
E       AssertionError: Aucun contour détecté dans ebay.png
E       assert []

tests/unit/services/test_contour_detection_service.py:45: AssertionError
------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------
[DEBUG] Image convertie en niveaux de gris sauvegardée.
[DEBUG] Image floutée sauvegardée.
[DEBUG] Image normalisée luminosité/contraste sauvegardée.
[DEBUG] Image avec bords Canny sauvegardée.
[DEBUG] 690 contours bruts trouvés.
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.50, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=14.00, w=9, h=3, ratio=3.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.00, w=3, h=2, ratio=1.50, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=6.00, w=4, h=3, ratio=1.33, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] 0 carte(s) détectée(s) après filtrage.
_________________________________________________ TestContourDetectionService.test_find_card_like_contours[ebay2.png] __________________________________________________

self = <tests.unit.services.test_contour_detection_service.TestContourDetectionService object at 0x7961286eba10>
service = <app.services.contour_detection_service.ContourDetectionService object at 0x7961286fa090>, image_name = 'ebay2.png'

    @pytest.mark.parametrize("image_name", [
        "card_normal_light.png",
        "ebay.png",
        "ebay2.png",
        "multiple_cards_image.png",
        "collection.png",
    ])
    def test_find_card_like_contours(self, service, image_name):
        # Construit le chemin complet de l'image
        img_path = os.path.join(TEST_ASSETS_DIR, image_name)
        # Lit l'image
        image = cv2.imread(img_path)
        # Saute le test si l'image n'est pas trouvée
        if image is None:
            pytest.skip(f"Image introuvable pour test: {img_path}")

        # Trouve les contours qui ressemblent à des cartes
        contours = service.find_card_like_contours(image)

        # Assure que des contours ont été détectés
>       assert contours, f"Aucun contour détecté dans {image_name}"
E       AssertionError: Aucun contour détecté dans ebay2.png
E       assert []

tests/unit/services/test_contour_detection_service.py:45: AssertionError
------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------
[DEBUG] Image convertie en niveaux de gris sauvegardée.
[DEBUG] Image floutée sauvegardée.
[DEBUG] Image normalisée luminosité/contraste sauvegardée.
[DEBUG] Image avec bords Canny sauvegardée.
[DEBUG] 698 contours bruts trouvés.
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=6.00, w=3, h=4, ratio=0.75, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.00, w=2, h=3, ratio=0.67, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.50, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=135.00, w=10, h=16, ratio=0.62, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] 0 carte(s) détectée(s) après filtrage.
_____________________________________________ TestContourDetectionService.test_extract_card_hashes[card_normal_light.png] ______________________________________________

self = <tests.unit.services.test_contour_detection_service.TestContourDetectionService object at 0x7961286f91d0>
service = <app.services.contour_detection_service.ContourDetectionService object at 0x7961286fa090>, image_name = 'card_normal_light.png'

    @pytest.mark.parametrize("image_name", [
        "card_normal_light.png",
        "ebay.png",
        "ebay2.png",
        "multiple_cards_image.png",
        "collection.png",
    ])
    def test_extract_card_hashes(self, service, image_name):
        # Construit le chemin complet de l'image
        img_path = os.path.join(TEST_ASSETS_DIR, image_name)
        # Saute le test si l'image n'est pas trouvée
        if not os.path.exists(img_path):
            pytest.skip(f"Image introuvable pour test: {img_path}")

        # Extrait les hachages des cartes de l'image
        hashes = service.extract_card_hashes(img_path)

        # Assure que des hachages ont été détectés
>       assert hashes, f"Aucun hachage détecté pour l'image {image_name}"
E       AssertionError: Aucun hachage détecté pour l'image card_normal_light.png
E       assert []

tests/unit/services/test_contour_detection_service.py:77: AssertionError
------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------
[DEBUG] Image convertie en niveaux de gris sauvegardée.
[DEBUG] Image floutée sauvegardée.
[DEBUG] Image normalisée luminosité/contraste sauvegardée.
[DEBUG] Image avec bords Canny sauvegardée.
[DEBUG] 241 contours bruts trouvés.
[DEBUG] Contour rejeté (critères non remplis): Aire=121.00, w=36, h=5, ratio=7.20, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=31.50, w=12, h=4, ratio=3.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=6.00, w=3, h=4, ratio=0.75, points=4
[DEBUG] 0 carte(s) détectée(s) après filtrage.
____________________________________________________ TestContourDetectionService.test_extract_card_hashes[ebay.png] ____________________________________________________

self = <tests.unit.services.test_contour_detection_service.TestContourDetectionService object at 0x7961286f9450>
service = <app.services.contour_detection_service.ContourDetectionService object at 0x7961286fa090>, image_name = 'ebay.png'

    @pytest.mark.parametrize("image_name", [
        "card_normal_light.png",
        "ebay.png",
        "ebay2.png",
        "multiple_cards_image.png",
        "collection.png",
    ])
    def test_extract_card_hashes(self, service, image_name):
        # Construit le chemin complet de l'image
        img_path = os.path.join(TEST_ASSETS_DIR, image_name)
        # Saute le test si l'image n'est pas trouvée
        if not os.path.exists(img_path):
            pytest.skip(f"Image introuvable pour test: {img_path}")

        # Extrait les hachages des cartes de l'image
        hashes = service.extract_card_hashes(img_path)

        # Assure que des hachages ont été détectés
>       assert hashes, f"Aucun hachage détecté pour l'image {image_name}"
E       AssertionError: Aucun hachage détecté pour l'image ebay.png
E       assert []

tests/unit/services/test_contour_detection_service.py:77: AssertionError
------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------
[DEBUG] Image convertie en niveaux de gris sauvegardée.
[DEBUG] Image floutée sauvegardée.
[DEBUG] Image normalisée luminosité/contraste sauvegardée.
[DEBUG] Image avec bords Canny sauvegardée.
[DEBUG] 690 contours bruts trouvés.
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.50, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=14.00, w=9, h=3, ratio=3.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.00, w=3, h=2, ratio=1.50, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=6.00, w=4, h=3, ratio=1.33, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] 0 carte(s) détectée(s) après filtrage.
___________________________________________________ TestContourDetectionService.test_extract_card_hashes[ebay2.png] ____________________________________________________

self = <tests.unit.services.test_contour_detection_service.TestContourDetectionService object at 0x7961286f96d0>
service = <app.services.contour_detection_service.ContourDetectionService object at 0x7961286fa090>, image_name = 'ebay2.png'

    @pytest.mark.parametrize("image_name", [
        "card_normal_light.png",
        "ebay.png",
        "ebay2.png",
        "multiple_cards_image.png",
        "collection.png",
    ])
    def test_extract_card_hashes(self, service, image_name):
        # Construit le chemin complet de l'image
        img_path = os.path.join(TEST_ASSETS_DIR, image_name)
        # Saute le test si l'image n'est pas trouvée
        if not os.path.exists(img_path):
            pytest.skip(f"Image introuvable pour test: {img_path}")

        # Extrait les hachages des cartes de l'image
        hashes = service.extract_card_hashes(img_path)

        # Assure que des hachages ont été détectés
>       assert hashes, f"Aucun hachage détecté pour l'image {image_name}"
E       AssertionError: Aucun hachage détecté pour l'image ebay2.png
E       assert []

tests/unit/services/test_contour_detection_service.py:77: AssertionError
------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------
[DEBUG] Image convertie en niveaux de gris sauvegardée.
[DEBUG] Image floutée sauvegardée.
[DEBUG] Image normalisée luminosité/contraste sauvegardée.
[DEBUG] Image avec bords Canny sauvegardée.
[DEBUG] 698 contours bruts trouvés.
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=6.00, w=3, h=4, ratio=0.75, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=9.00, w=4, h=4, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.00, w=2, h=3, ratio=0.67, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=8.00, w=5, h=5, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=1.50, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=135.00, w=10, h=16, ratio=0.62, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] Contour rejeté (critères non remplis): Aire=2.00, w=3, h=3, ratio=1.00, points=4
[DEBUG] 0 carte(s) détectée(s) après filtrage.
======================================================================= short test summary info ========================================================================
FAILED tests/unit/services/test_contour_detection_service.py::TestContourDetectionService::test_find_card_like_contours[card_normal_light.png] - AssertionError: Aucun contour détecté dans card_normal_light.png
FAILED tests/unit/services/test_contour_detection_service.py::TestContourDetectionService::test_find_card_like_contours[ebay.png] - AssertionError: Aucun contour détecté dans ebay.png
FAILED tests/unit/services/test_contour_detection_service.py::TestContourDetectionService::test_find_card_like_contours[ebay2.png] - AssertionError: Aucun contour détecté dans ebay2.png
FAILED tests/unit/services/test_contour_detection_service.py::TestContourDetectionService::test_extract_card_hashes[card_normal_light.png] - AssertionError: Aucun hachage détecté pour l'image card_normal_light.png
FAILED tests/unit/services/test_contour_detection_service.py::TestContourDetectionService::test_extract_card_hashes[ebay.png] - AssertionError: Aucun hachage détecté pour l'image ebay.png
FAILED tests/unit/services/test_contour_detection_service.py::TestContourDetectionService::test_extract_card_hashes[ebay2.png] - AssertionError: Aucun hachage détecté pour l'image ebay2.png
===================================================================== 6 failed, 4 passed in 3.76s ======================================================================
exit status 1
task: Failed to run task "test": exit status 1
PS C:\Users\Maxen\OneDrive\Documents\GitHub\iris> 